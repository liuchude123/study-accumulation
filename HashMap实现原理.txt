HashMap实现原理

public class HashMap<K,V> extends AbstractMap<K,V>
    implements Map<K,V>, Cloneable, Serializable

总结：HashMap的实现原理
1.利用key的hashCode重新hash计算出当前对象的元素在数组中的下标
2.存储时，如果出现hash值相同的key，此时有两种情况。(1)如果key相同，则覆盖原始值；(2)如果key不同（出现冲突），则将当前的key-value放入链表中
3.获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。
4.理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。

1.Java中的数据存储方式

有两种结构：数组和链表

数组
数组存储区间是连续的，占用内存严重，故空间复杂的很大，但数组的二分查找时间复杂度小，为O(1)；
数组的特点：查询速度快，增删慢
原因：空间连续，二分查找，从而寻址迅速，但是在增删元素的时候会有较大幅度的移动

链表
链表存储区间是不连续的(离散)，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，为O(N)；
链表的特点：查询速度慢、增删快。
原因：空间离散，寻址困难，但增删元素只需修改结点指针

哈希表
哈希表是由数组+单链表组成，哈希表有多种不同的实现方法，常用的一种方法--拉链法，可以理解为"单链表的数组"
哈希表特点：寻址容易，增删也容易，查找方便，同时不占用太多的内存空间
原因：综合了数组和链表各自的优势

2.HashMap
1.定义
散列桶bucket，默认长度为16的数组，每个元素存储的是一个链表的头结点，通过hash(key)%len，也就是元素的key的哈希值对数组长度取模，获得要添加的元素所要存放的数组索引，键值对所存放的数据结构其实是HashMap中定义的一个Entity内部类，Entity[]数组实现

2.Entry(1.8-Node)
Entry
final K key; final修饰表示key是不能改变的
V value; 值
Entry<k,v> next; 指向下一个结点
int hash; 这个hash是一个散列码，hash=hash(key.hashcode());

3.重要参数
容量(Capacity)：bucket的大小
负载因子(Load factor)：bucket填满程度的最大比例，当bucket中的entries的数目大于capacity*loadFactor时就需要调整bucket的大小为当前的2倍
HashMap默认初始容量DEFAULT_INITIAL_CAPACITY=16 ，HashMap默认负载因子DEFAULT_LOAD_FACTOR=0.75，HashMap默认临界值为16*0.75=12，HashMap的最大容量MAXIMUM_CAPACITY=1<<30

4.HashMap的数组初始化大小都是2的n次幂时效率最高？
取模用位运算(hash & (arrayLength-1))会比较快，所以数组的大小永远是2的N次方， 你随便给一个初始值比如17会转为32
当数组长度为2的n次幂的时候，不同的key算得得index相同的几率较小，那么数据在数组上分布就比较均匀，也就是说碰撞的几率小，
相对的，查询的时候就不用遍历某个位置上的链表，这样查询效率也就较高了
散列的本意就是要尽量均匀分布

5.put方法(V put(K key, V value))
1.8之前
1.HashMap会对null值key进行特殊处理，总是放到table[0]位置
2.对key的hashCode进行hash计算，再通过hash与table.length取模计算在数组中的存储位置index
3.判断是否发生hash碰撞，即table[index]有结点就发生碰撞了
	a如果没有发生碰撞，直接存放到bucket里table[index]位置的链表第一个元素
	b如果发生碰撞，遍历table[index]位置的链表，查找相同key的Entry
		a如果在table[index]位置的链表找到相同key的Entry，则使用新的value替换原来的oldValue(保证key的唯一性)，return oldValue
		b如果没有在table[index]位置的链表找到相同key的Entry，则添加新结点到table[index]位置的链表，新结点总是在table[index]位置的链表第一个元素，原来的结点通过新结点的next进行链接，这样以链表形式解决hash冲突问题
3.如果元素数量大于等于临界值(capactiy*factor)时，则进行扩容，是table数组长度变为table.length*2
4.return null


1.8
1.对key的hashCode进行hash计算，再通过hash与table.length取模计算在数组中的存储位置index
2.如果没有发生碰撞，直接存放到bucket里table[index]位置的链表第一个元素
3.如果碰撞了，以链表的形式存在bucket里table[index]，如果节点已经存在则使用新的value替换原来的oldValue(保证key的唯一性) 
4.如果碰撞导致链表过长(大于等于TREEIFY_THRESHOLD=8)，就把链表转换成红黑树，提高查询的效率(如果数组大小<MIN_TREEIFY_CAPACITY=64(4*16)，就要resize(扩容)) 
5.如果素数量大于等于临界值(capactiy*factor)时，则进行扩容，是table数组长度变为table.length*2
		
TREEIFY_THRESHOLD = 8; // 红黑树阈值
UNTREEIFY_THRESHOLD = 6; // 链表阈值
使用红黑树和链表之间切换的阈值，当冲突的元素数增加到8时，链表变为树；当减少至6时，树切换为链表，中间有2个缓冲值的原因是避免频繁的切换浪费计算机资源
1.8只多了一个新特性，当冲突的链表的长度>=8的时，链表转换为红黑树提高查询的效率


6.get方法(V get(Object key))
1.8之前
1.key为null时会进行特殊处理，在table[0]的链表上查找key为null的元素 
2.对key的hashCode进行hash计算，再通过hash与table.length取模计算在数组中的存储位置index，然后遍历table[index]上的链表，直到找到key，然后返回

1.8
1.先计算hash然后通过hash与table.length取模计算index值，然后遍历table[index]上的链表，
(也就是常说的通过key就可以拿到value，若找到则返回value，找不到返回null)
(HashMap底层都是通过key拿到entry对象，然后直接从entry对象里获取value)
a如果没有冲突，bucket里的第一个节点，直接命中 
b如果有冲突，则通过key.equals(k)去查找对应的entry 
	a若为树，则在树中通过key.equals(k)查找，O(logn) 
	b若为链表，则在链表中通过key.equals(k)查找，O(n)

7.remove方法(V remove(Object key))
与put get类似，先计算hash，再计算index，然后遍历table，将找到的元素从table[index]链表移除

8.clear方法(void clear())
遍历table然后把每个位置置为null，同时修改元素个数为0，注意只会清楚里面的元素，并不会重置capactiy

9.containsKey(boolean containsKey(Object key))和containsValue(boolean containsValue(Object value))
containsKey方法是先计算hash然后使用hash和table.length取模得到index值，遍历table[index]元素查找是否包含key相同的值
containsValue方法就是直接遍历所有元素直到找到value，由此可见本质上和普通数组和list的contains方法没什么区别，别指望它会像containsKey那么高效

10.resize方法(Entry<K,V>[] resize()，Node<K,V>[] resize())
先创建一个容量为table.length*2的新table，修改临界值，然后把table里面元素计算hash值并使用hash与table.length*2重新计算index放入到新的table里面 
注意：是用每个元素的hash全部重新计算index，而不是简单的把原table对应index位置元素简单的移动到新table对应位置

11.hash方法
1.8之前
h = key.hashCode();
h ^= (h >>> 20) ^ (h >>> 12);
hash = h ^ (h >>> 7) ^ (h >>> 4); // 对key的hashcode进行了二次hash，以获得更好的散列值

1.8
h = key.hashCode(); 
hash = h ^ (h >>> 16); // 对key的hashcode进行了二次hash，以获得更好的散列值
高16bit不变，低16bit和高16bit做了一个异或运算

12.计算table数组中的下标index
n为数组大小
hash & (n - 1) 相当于hash%n


13.位运算(操作数为二进制数)
位移动运算符:

<<表示左移，左移一位表示原来的值乘2

例如：3 <<2(3为int型) 
1）把3转换为二进制数字0000 0000 0000 0000 0000 0000 0000 0011， 
2）把该数字高位(左侧)的两个零移出，其他的数字都朝左平移2位， 
3）在低位(右侧)的两个空位补零，则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 1100， 
转换为十进制是12。

同理，>>表示右移，右移一位表示原来的值除以2
      >>>右移，左边空出的位以0填充  

 
位运算:
位运算符包括:　与（&）、非（~）、或（|）、异或（^）
&：当两边操作数的位同时为1时，结果为1，否则为0。如1100&1010=1000 　　
|：当两边操作数的位有一边为1时，结果为1，否则为0。如1100|1010=1110 　　
~：0变1，1变0。
^：两边的位不同时，结果为1，否则为0。如1100^1010=0110


14.解决hash冲突的办法
通过构造性能良好的哈希函数，可以减少冲突，但一般不可能完全避免冲突，因此解决冲突是哈希法的另一个关键问题。创建哈希表和查找哈希表都会遇到冲突，两种情况下解决冲突的方法应该一致。

1.开放定址法，也称再散列法（线性探测再散列，二次探测再散列，伪随机探测再散列）
当关键字key的哈希地址p=H（key）出现冲突时，以p为基础，产生另一个哈希地址p1，如果p1仍然冲突，再以p为基础，产生另一个哈希地址p2，…，直到找出一个不冲突的哈希地址pi ，将相应元素存入其中

2.再哈希法
同时构造多个不同的哈希函数：Hi=RH1（key）  i=1，2，…，k   当哈希地址Hi=RH1（key）发生冲突时，再计算Hi=RH2（key）……，直到冲突不再产生

3.链地址法
将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况

与开放定址法相比，
拉链法的优点：
①拉链法处理冲突简单，非同义词决不会发生冲突，因此平均查找长度较短；
②拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况；
③开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间；
④在用拉链法构造的散列表中，删除结点的操作易于实现，只要简单地删去链表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结点的空间置为空，只能在被删结点上做删除标记，而不能真正删除结点。
 
拉链法的缺点：
①指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度

4.建立一个公共溢出区
哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表

*Java中HashMap，ConcurrentHashMap等解决hash冲突的办法就是采用的链地址法。



