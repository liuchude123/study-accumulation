1.垃圾回收动作何时执行？
1.当年轻代内存满时，会引发一次普通GC，该GC仅回收年轻代。需要强调的时，年轻代满是指Eden代满，Survivor满不会引发GC
2.当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代
3.当永久代满时也会引发Full GC，会导致Class、Method元信息的卸载                                           

2.GC常用组合
组合	    新生代GC策略		      年老代GC策略		      说明
组合1	    Serial	            Serial Old	        Serial和Serial Old都是单线程进行GC，特点就是GC时暂停所有应用线程。
组合2	    Serial	            CMS+Serial Old	    CMS(Concurrent Mark Sweep)是并发GC，实现GC线程和应用线程并发工作，不需要暂停所有应用线程。另外，当CMS进行GC失败时，会自动使用Serial Old策略进行GC。
组合3	    ParNew              CMS	                使用-XX:+UseParNewGC选项来开启。ParNew是Serial的并行版本，可以指定GC线程数，默认GC线程数为CPU的数量。可以使用-XX:ParallelGCThreads选项指定GC的线程数。如果指定了选项-XX:+UseConcMarkSweepGC选项，则新生代默认使用ParNew GC策略。
组合4	    ParNew              Serial Old	        使用-XX:+UseParNewGC选项来开启。新生代使用ParNew GC策略，年老代默认使用Serial Old GC策略。
组合5	    Parallel Scavenge   Serial Old	        Parallel Scavenge策略主要是关注一个可控的吞吐量：应用程序运行时间 / (应用程序运行时间 + GC时间)，可见这会使得CPU的利用率尽可能的高，适用于后台持久运行的应用程序，而不适用于交互较多的应用程序。
组合6	    Parallel Scavenge   Parallel Old	      Parallel Old是Serial Old的并行版本
组合7	    G1GC                G1GC	              -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC   #开启
                                                  -XX:MaxGCPauseMillis =50                        #暂停时间目标
                                                  -XX:GCPauseIntervalMillis =200                  #暂停间隔目标
                                                  -XX:+G1YoungGenSize=512m                        #年轻代大小
                                                  -XX:SurvivorRatio=6                             #幸存区比例
                                                  

3.JVM调优的主要过程
1.确定堆内存大小（-Xmx、_Xms）
2.合理分配新生代和老年代（-XX：NewRatio、Xmn、-XX：SurvivorRatio）
3.确定永久区大小（-XX：Permsize、-XX：MaxPermsize）
4.选择垃圾收集器、对垃圾收集器进行合理的设置
5.使用一些禁用命令，提升系统性能
	禁用显示GC（-XX：+DisableExplicitGC）
	禁用类元数据回收（-Xnoclassgc）
	禁用类验证（-Xverify:none）
	。。。
