1.垃圾回收动作何时执行？
1.当年轻代内存满时，会引发一次普通GC，该GC仅回收年轻代。需要强调的时，年轻代满是指Eden代满，Survivor满不会引发GC
2.当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代
3.当永久代满时也会引发Full GC，会导致Class、Method元信息的卸载                                           

2.GC常用组合
组合	    新生代GC策略		年老代GC策略		说明
组合1	    Serial	            Serial Old	        Serial和Serial Old都是单线程进行GC，特点就是GC时暂停所有应用线程。
组合2	    Serial	            CMS+Serial Old	    CMS(Concurrent Mark Sweep)是并发GC，实现GC线程和应用线程并发工作，不需要暂停所有应用线程。另外，当CMS进行GC失败时，会自动使用Serial Old策略进行GC。
组合3	    ParNew              CMS	                使用-XX:+UseParNewGC选项来开启。ParNew是Serial的并行版本，可以指定GC线程数，默认GC线程数为CPU的数量。可以使用-XX:ParallelGCThreads选项指定GC的线程数。如果指定了选项-XX:+UseConcMarkSweepGC选项，则新生代默认使用ParNew GC策略。
组合4	    ParNew              Serial Old	        使用-XX:+UseParNewGC选项来开启。新生代使用ParNew GC策略，年老代默认使用Serial Old GC策略。
组合5	    Parallel Scavenge   Serial Old	        Parallel Scavenge策略主要是关注一个可控的吞吐量：应用程序运行时间 / (应用程序运行时间 + GC时间)，可见这会使得CPU的利用率尽可能的高，适用于后台持久运行的应用程序，而不适用于交互较多的应用程序。
组合6	    Parallel Scavenge   Parallel Old	    Parallel Old是Serial Old的并行版本
组合7	    G1GC                G1GC	            -XX:+UnlockExperimentalVMOptions -XX:+UseG1GC   #开启
                                                    -XX:MaxGCPauseMillis =50                        #暂停时间目标
                                                    -XX:GCPauseIntervalMillis =200                  #暂停间隔目标
                                                    -XX:+G1YoungGenSize=512m                        #年轻代大小
                                                    -XX:SurvivorRatio=6                             #幸存区比例
                                                  

3.JVM调优的主要过程
1.基本参数设置调优
整个堆大小=年轻代大小 + 年老代大小 + 持久代大小
1.堆大小调优
-Xms，堆内存初始值
-Xmx，堆内存最大值
-Xms值可以设置与-Xmx相同，以避免运行时不断扩充jvm内存空间，及每次垃圾回收完成后JVM重新分配内存
2.合理设置每个线程的堆栈大小
-Xss128k，设置每个线程的堆栈大小，JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K，根据应用的线程所需内存大小进行调整
在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，经验值在3000~5000左右
3.合理分配年轻代和老年代
-Xmn2g，设置年轻代大小为2G，增大年轻代后，将会减小年老代大小，此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8
-XX:NewRatio=4，设置年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)，设置为4，则年轻代与年老代所占比值为1:4，年轻代占整个堆栈的1/5
-XX:SurvivorRatio=4，设置年轻代中Eden区与Survivor区的大小比值，设置为4，则Eden区与两个Survivor Fromo和Survivor To的比值为4:1:1，一个Survivor区占整个年轻代的1/6
4.合理设置持久代大小
-XX:MaxPermSize=64m，设置持久代大小为64m，持久代一般固定大小为64m
5.合理设置垃圾最大年龄
-XX:MaxTenuringThreshold=0，设置垃圾最大年龄
如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。
如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。

2.选择垃圾收集器、对垃圾收集器进行合理的设置，见上2.GC常用组合
3.使用一些禁用命令，提升系统性能
	禁用显示GC（-XX：+DisableExplicitGC）
	禁用类元数据回收（-Xnoclassgc）
	禁用类验证（-Xverify:none）
	。。。
	
4.常用调优案例
1.新生代的垃圾回收速度高于老年代回收，因此，将年轻对象预留在新生代有利于提高整体的GC效率。
2.稳定的堆大小对垃圾回收有利，获得一个稳定的堆大小的方法是使-Xms和-Xmx的大小一致，如果这样设置，系统在运行时候堆大小是恒定的，稳定的堆空间可以减少GC的次数。
